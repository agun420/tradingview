// Â© AlgoAlpha Enhanced - Real-Time Smart Money Breakout System
// This Source Code is subject to the Mozilla Public License 2.0
// https://mozilla.org/MPL/2.0/
//@version=6
indicator("Real-Time Smart Money Breakout System", "RT-Pro", overlay=true, max_boxes_count = 500, max_lines_count = 500, max_labels_count = 500)
import TradingView/ta/10

// ============================================================================
// INPUTS - Real-Time Configuration
// ============================================================================

// Real-Time Settings
realtime_mode = input.bool(true, "Real-Time Mode (Faster Signals)", group = "Real-Time Settings")
quick_detection = input.bool(true, "Quick Channel Detection", group = "Real-Time Settings")
min_channel_bars = input.int(5, "Minimum Channel Bars", minval=3, maxval=20, group = "Real-Time Settings")
breakout_confirmation = input.string("Immediate", "Breakout Confirmation", options=["Immediate", "Next Bar", "Volume Confirmed"], group = "Real-Time Settings")

// Dynamic Detection Settings
dynamic_length = input.bool(true, "Dynamic Length Adjustment", group = "Dynamic Settings")
base_length = input.int(14, "Base Detection Length", minval=5, maxval=50, group = "Dynamic Settings")
volatility_multiplier = input.float(1.5, "Volatility Sensitivity", minval=0.5, maxval=3.0, step=0.1, group = "Dynamic Settings")

// Pre-Signal Alerts
show_pre_signals = input.bool(true, "Show Pre-Breakout Signals", group = "Pre-Signal Settings")
pre_signal_threshold = input.float(0.8, "Pre-Signal Threshold (0-1)", minval=0.5, maxval=0.95, step=0.05, group = "Pre-Signal Settings")

// Traditional Settings (kept for compatibility)
overlap = input.bool(false, "Nested Channels", group = "Traditional Settings")
strong = input.bool(false, "Strong Closes Only (Slower)", group = "Traditional Settings")
length_ = input.int(50, title="Normalization Length", minval=20, group = "Traditional Settings")

// Signal Enhancement Settings
signal_strength_enabled = input.bool(true, "Enable Signal Strength Scoring", group="Signal Enhancement")
min_signal_strength = input.float(4.0, "Minimum Signal Strength", minval=1.0, maxval=10.0, step=0.1, group="Signal Enhancement")
show_position_sizing = input.bool(true, "Show Position Size Recommendations", group="Signal Enhancement")
account_size = input.float(10000, "Account Size ($)", minval=1000, group="Signal Enhancement")
risk_per_trade = input.float(2.0, "Risk Per Trade (%)", minval=0.5, maxval=10.0, step=0.1, group="Signal Enhancement")

// Volume Analysis (Optimized for Speed)
shw_vol = input.bool(true, "Show Volume Analysis", group = "Volume Analysis")
vol_lookback = input.int(10, "Volume Lookback (Faster)", minval=5, maxval=50, group="Volume Analysis")
volume_spike_threshold = input.float(1.5, "Volume Spike Multiplier", minval=1.0, maxval=3.0, step=0.1, group="Volume Analysis")

// Momentum & Trend Analysis (Faster)
rsi_length = input.int(9, "RSI Length (Faster)", minval=5, maxval=21, group="Momentum Analysis")
ema_fast = input.int(9, "Fast EMA", minval=5, maxval=21, group="Trend Analysis")
ema_slow = input.int(21, "Slow EMA", minval=15, maxval=50, group="Trend Analysis")

// Appearance
text_size = input.string("Small", "Text Size", options=["Tiny","Small","Medium","Large"], group="Appearance")
green = input.color(#00ffbb, title = "Bullish Colour", group = "Appearance")
red = input.color(#ff1100, title = "Bearish Colour", group = "Appearance")
yellow = input.color(#ffaa00, title = "Pre-Signal Colour", group = "Appearance")

// ============================================================================
// VARIABLES - Real-Time Arrays and Tracking
// ============================================================================

var boxes = array.new_box()
var boxes_u = array.new_box()
var boxes_l = array.new_box()
var line[] gaugeLines = array.new<line>()
var label gaugeLabel = na
var line[] centerLines = array.new<line>()
var line[] pre_signal_lines = array.new<line>()

// Real-time tracking
var float last_high = na
var float last_low = na
var int channel_start_bar = na
var bool in_channel = false
var float channel_top = na
var float channel_bottom = na

// ============================================================================
// OPTIMIZED CALCULATIONS
// ============================================================================

// Dynamic length adjustment based on volatility
current_volatility = ta.atr(10)
avg_volatility = ta.sma(current_volatility, 20)
volatility_ratio = avg_volatility > 0 ? current_volatility / avg_volatility : 1

// Adjust detection length dynamically
dynamic_effective_length = dynamic_length ? math.max(1, math.round(base_length * (2 - math.min(volatility_ratio * volatility_multiplier, 2)))) : base_length

// Use a safe length for initial bars to prevent errors
effective_length = bar_index < base_length ? base_length : dynamic_effective_length

// Faster calculations with reduced lookback
lowestLow = ta.lowest(low, math.min(effective_length, length_))
highestHigh = ta.highest(high, math.min(effective_length, length_))
normalizedPrice = (close - lowestLow) / math.max(highestHigh - lowestLow, 0.0001)
vol = ta.stdev(normalizedPrice, math.min(effective_length, 14))

// Faster ATR and volume calculations
atr_val = ta.atr(10)
sma_vol_fast = ta.sma(volume, vol_lookback)
rsi_val = ta.rsi(close, rsi_length)
ema_fast_val = ta.ema(close, ema_fast)
ema_slow_val = ta.ema(close, ema_slow)

// Real-time channel detection
is_local_high = high > ta.highest(high[1], 3) and high > ta.highest(high, 3)[1]
is_local_low = low < ta.lowest(low[1], 3) and low < ta.lowest(low, 3)[1]

// ============================================================================
// REAL-TIME FUNCTIONS
// ============================================================================

textSize(text_size) =>
    switch text_size
        "Tiny"  => size.tiny
        "Small" => size.small
        "Medium"=> size.normal
        "Large" => size.large

// Real-time signal strength calculator (optimized)
calculate_realtime_signal_strength(bool is_bullish) =>
    float strength = 0.0
    
    // Current volume vs recent average (0-3 points)
    vol_ratio = volume / sma_vol_fast
    if vol_ratio > volume_spike_threshold * 1.5
        strength += 3.0
    else if vol_ratio > volume_spike_threshold
        strength += 2.0
    else if vol_ratio > 1.1
        strength += 1.0
    
    // RSI momentum (0-2 points)
    if is_bullish
        if rsi_val > 50 and rsi_val < 75
            strength += 2.0
        else if rsi_val > 45
            strength += 1.0
    else
        if rsi_val < 50 and rsi_val > 25
            strength += 2.0
        else if rsi_val < 55
            strength += 1.0
    
    // Trend alignment (0-2 points)
    if is_bullish and ema_fast_val > ema_slow_val
        strength += 1.5
        if close > ema_fast_val
            strength += 0.5
    else if not is_bullish and ema_fast_val < ema_slow_val
        strength += 1.5
        if close < ema_fast_val
            strength += 0.5
    
    // Price momentum (0-1.5 points)
    price_change = (close - close[1]) / close[1]
    if (is_bullish and price_change > 0.01) or (not is_bullish and price_change < -0.01)
        strength += 1.5
    else if (is_bullish and price_change > 0) or (not is_bullish and price_change < 0)
        strength += 0.5
    
    // Time-based bonus for major sessions (0-0.5 points)
    hour_val = hour(time)
    if (hour_val >= 8 and hour_val <= 10) or (hour_val >= 13 and hour_val <= 15)
        strength += 0.5
    
    strength

// Real-time channel detection
detect_realtime_channel(in_channel_arg) =>
    range_high = ta.highest(high, min_channel_bars)
    range_low = ta.lowest(low, min_channel_bars)

    is_formed = false
    top = float(na)
    bottom = float(na)
    start_bar = int(na)

    if quick_detection
        range_size = range_high - range_low
        
        if range_size > atr_val * 0.5 and not in_channel_arg
            is_formed = true
            top = range_high
            bottom = range_low
            start_bar = bar_index - min_channel_bars

    [is_formed, top, bottom, start_bar]

// ============================================================================
// REAL-TIME MAIN LOGIC
// ============================================================================

upbreak = 0.0
downbreak = 0.0
pre_signal_bull = false
pre_signal_bear = false
signal_strength = 0.0

// Real-time channel detection
[new_channel_formed, new_top, new_bottom, new_start_bar] = detect_realtime_channel(in_channel)

if new_channel_formed
    in_channel := true
    channel_top := new_top
    channel_bottom := new_bottom
    channel_start_bar := new_start_bar

// Traditional channel detection (if real-time mode is off)
if not realtime_mode
    upper = (ta.highestbars(vol, effective_length + 1) + effective_length)/effective_length
    lower = (ta.lowestbars(vol, effective_length + 1) + effective_length)/effective_length
    duration = math.max(nz(ta.barssince(ta.crossover(lower,upper))), 1)
    h = ta.highest(duration)
    l = ta.lowest(duration)
    
    if ta.crossover(upper, lower) and duration > min_channel_bars
        boxes.unshift(box.new(bar_index-duration, h, bar_index, l, bgcolor = color.new(chart.fg_color, 90), border_color = na))
        boxes_u.unshift(box.new(bar_index-duration, h, bar_index, h-atr_val/2, bgcolor = color.new(red, 70), border_color = na))
        boxes_l.unshift(box.new(bar_index-duration, l+atr_val/2, bar_index, l, bgcolor = color.new(green, 70), border_color = na))
        
        centerLines.unshift(line.new(bar_index-duration, (h+l)/2, bar_index, (h+l)/2, color = color.new(chart.fg_color, 50), width = 1, style = line.style_dashed))

// Real-time breakout detection
if realtime_mode and in_channel and not na(channel_top) and not na(channel_bottom)
    // Calculate current signal strength
    bull_strength = calculate_realtime_signal_strength(true)
    bear_strength = calculate_realtime_signal_strength(false)
    
    current_price = close
    if breakout_confirmation == "Next Bar"
        current_price := close[1]
    else if breakout_confirmation == "Volume Confirmed"
        current_price := volume > sma_vol_fast * volume_spike_threshold ? close : na
    
    if not na(current_price)
        // Pre-signal detection (approaching breakout)
        if show_pre_signals
            distance_to_top = (channel_top - current_price) / (channel_top - channel_bottom)
            distance_to_bottom = (current_price - channel_bottom) / (channel_top - channel_bottom)
            
            if distance_to_top < (1 - pre_signal_threshold) and bull_strength > min_signal_strength * 0.7
                pre_signal_bull := true
            
            if distance_to_bottom < (1 - pre_signal_threshold) and bear_strength > min_signal_strength * 0.7
                pre_signal_bear := true
        
        // Actual breakout detection
        if current_price > channel_top and bull_strength >= min_signal_strength
            upbreak := channel_bottom
            signal_strength := bull_strength
            in_channel := false
            
        else if current_price < channel_bottom and bear_strength >= min_signal_strength
            downbreak := channel_top
            signal_strength := bear_strength
            in_channel := false

// Traditional breakout detection
if not realtime_mode and boxes.size() > 0
    for i = 0 to boxes.size()-1
        box_top = boxes.get(i).get_top()
        box_bottom = boxes.get(i).get_bottom()
        
        current_price = strong ? math.avg(close, open) : close
        bull_strength = calculate_realtime_signal_strength(true)
        bear_strength = calculate_realtime_signal_strength(false)
        
        if current_price > box_top and bull_strength >= min_signal_strength
            upbreak := box_bottom
            signal_strength := bull_strength
            boxes.remove(i)
            boxes_u.remove(i)
            boxes_l.remove(i)
            centerLines.remove(i)
            break
            
        else if current_price < box_bottom and bear_strength >= min_signal_strength
            downbreak := box_top
            signal_strength := bear_strength
            boxes.remove(i)
            boxes_u.remove(i)
            boxes_l.remove(i)
            centerLines.remove(i)
            break
        else
            // Update box positions
            boxes.get(i).set_right(bar_index)
            boxes_u.get(i).set_right(bar_index)
            boxes_l.get(i).set_right(bar_index)
            centerLines.get(i).set_x2(bar_index)

// ============================================================================
// ENHANCED REAL-TIME VISUALS
// ============================================================================

// Real-time channel visualization
if realtime_mode and in_channel and not na(channel_top) and not na(channel_bottom) and not na(channel_start_bar)
    // Draw current channel
    current_channel = box.new(channel_start_bar, channel_top, bar_index + 5, channel_bottom, bgcolor = color.new(chart.fg_color, 85), border_color = color.new(chart.fg_color, 60))
    
    // Draw breakout zones
    upper_zone = box.new(channel_start_bar, channel_top, bar_index + 5, channel_top - atr_val/2, bgcolor = color.new(red, 60), border_color = na)
    lower_zone = box.new(channel_start_bar, channel_bottom + atr_val/2, bar_index + 5, channel_bottom, bgcolor = color.new(green, 60), border_color = na)

// Pre-signal alerts
if pre_signal_bull
    label.new(bar_index, high, "â  BULL SETUP", color=color.new(yellow, 20), textcolor=chart.bg_color, style=label.style_label_down, size=size.small)

if pre_signal_bear
    label.new(bar_index, low, "â  BEAR SETUP", color=color.new(yellow, 20), textcolor=chart.bg_color, style=label.style_label_up, size=size.small)

// Breakout signals with position sizing
position_size = 0.0
if upbreak != 0 or downbreak != 0
    entry_price = upbreak != 0 ? close : close
    stop_loss = upbreak != 0 ? upbreak - atr_val : downbreak + atr_val
    risk_amount = account_size * (risk_per_trade / 100)
    price_diff = math.abs(entry_price - stop_loss)
    if price_diff > 0
        position_size := math.min(risk_amount / price_diff, account_size * 0.25)

if upbreak != 0
    signal_text = "ð BUY NOW!\nStr: " + str.tostring(signal_strength, "0.1") + "/10"
    if show_position_sizing and position_size > 0
        signal_text := signal_text + "\nSize: $" + str.tostring(math.round(position_size * close), "0")
    label.new(bar_index, upbreak, signal_text, color=green, textcolor=chart.bg_color, style=label.style_label_up, size=textSize(text_size))

if downbreak != 0
    signal_text = "ð» SELL NOW!\nStr: " + str.tostring(signal_strength, "0.1") + "/10"
    if show_position_sizing and position_size > 0
        signal_text := signal_text + "\nSize: $" + str.tostring(math.round(position_size * close), "0")
    label.new(bar_index, downbreak, signal_text, color=red, textcolor=chart.bg_color, style=label.style_label_down, size=textSize(text_size))

// Real-time strength indicator
if realtime_mode
    current_bull_strength = calculate_realtime_signal_strength(true)
    current_bear_strength = calculate_realtime_signal_strength(false)
    max_strength = math.max(current_bull_strength, current_bear_strength)
    
    if barstate.islast and max_strength > min_signal_strength * 0.8
        strength_color = current_bull_strength > current_bear_strength ? green : red
        strength_text = "Strength: " + str.tostring(max_strength, "0.1") + "/10"
        
        var table strength_table = table.new(position.top_right, 1, 1, bgcolor=color.new(strength_color, 80), border_width=1)
        table.cell(strength_table, 0, 0, strength_text, text_color=chart.bg_color, text_halign=text.align_center, text_size=size.small)

// ============================================================================
// ENHANCED REAL-TIME ALERTS
// ============================================================================

alertcondition(new_channel_formed, "New Channel Formation", "Real-time channel detected - prepare for breakout")
alertcondition(pre_signal_bull, "Bullish Setup Alert", "Approaching bullish breakout - get ready!")
alertcondition(pre_signal_bear, "Bearish Setup Alert", "Approaching bearish breakout - get ready!")
alertcondition(upbreak != 0, "IMMEDIATE BUY SIGNAL", "ð BULLISH BREAKOUT NOW!")
alertcondition(downbreak != 0, "IMMEDIATE SELL SIGNAL", "ð» BEARISH BREAKOUT NOW!")

// Plot values for alerts
plot(signal_strength, "Signal Strength", display = display.none)
plot(position_size, "Position Size", display = display.none)
plot(realtime_mode ? (in_channel ? 1 : 0) : (boxes.size() > 0 ? 1 : 0), "Channel Active", display = display.none)
