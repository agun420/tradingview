// ¬© 2024 Elite Trading Systems - Retail Optimized Version
//@version=5
indicator("Elite Confluence Engine Pro V3 - Retail Edition", "ECE Pro V3", overlay=true, max_boxes_count=100, max_lines_count=100, max_labels_count=150)

// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
//                            BEGINNER-FRIENDLY SETUP WIZARD
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

// üßô‚Äç‚ôÇÔ∏è SETUP WIZARD - Choose Your Trading Style
group_wizard = "üßô‚Äç‚ôÇÔ∏è QUICK SETUP WIZARD (Start Here!)"
trading_style = input.string("Balanced", "Choose Your Trading Style", 
  options=["Beginner Safe", "Balanced", "Aggressive", "Professional", "Custom"], 
  tooltip="Beginner Safe: Conservative signals, perfect for learning\nBalanced: Good mix of safety and opportunity\nAggressive: More signals, higher risk\nProfessional: Advanced features enabled\nCustom: Set everything manually", 
  group=group_wizard)

experience_level = input.string("Beginner", "Your Experience Level", 
  options=["Beginner", "Intermediate", "Advanced"], 
  tooltip="This adjusts explanations and interface complexity", 
  group=group_wizard)

auto_risk_management = input.bool(true, "Auto Risk Management", 
  tooltip="Let the indicator calculate position sizes and risk levels automatically", 
  group=group_wizard)

show_learning_mode = input.bool(true, "Learning Mode", 
  tooltip="Shows educational tooltips and explanations on chart", 
  group=group_wizard)

// üì± MOBILE-FRIENDLY CONTROLS
group_mobile = "üì± Mobile-Friendly Settings"
mobile_mode = input.bool(false, "Mobile Optimized Display", 
  tooltip="Optimizes display for mobile devices", group=group_mobile)
text_size = input.string("Normal", "Text Size", 
  options=["Small", "Normal", "Large"], group=group_mobile)
simplified_view = input.bool(false, "Simplified View", 
  tooltip="Hide advanced indicators, show only signals", group=group_mobile)

// üéØ SIGNAL PREFERENCES
group_signals = "üéØ Signal Settings (Easy)"
signal_frequency = input.string("Medium", "Signal Frequency", 
  options=["Conservative (Fewer, Higher Quality)", "Medium", "Active (More Signals)"], 
  tooltip="Conservative: 2-5 signals per week\nMedium: 5-10 signals per week\nActive: 10+ signals per week", 
  group=group_signals)

market_type = input.string("Any", "Optimize For Market Type", 
  options=["Any", "Trending Markets", "Ranging Markets", "Volatile Markets"], 
  tooltip="Adjusts the indicator for specific market conditions", 
  group=group_signals)

// Auto-configure based on trading style
is_beginner = trading_style == "Beginner Safe"
is_balanced = trading_style == "Balanced"
is_aggressive = trading_style == "Aggressive"
is_professional = trading_style == "Professional"
is_custom = trading_style == "Custom"

// Smart defaults based on style
default_risk_pct = is_beginner ? 0.5 : is_balanced ? 1.0 : is_aggressive ? 2.0 : 1.5
default_reward_ratio = is_beginner ? 3.0 : is_balanced ? 2.5 : is_aggressive ? 2.0 : 2.5
default_signal_strength = is_beginner ? "High" : is_balanced ? "Medium" : "Low"

// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
//                              SIMPLIFIED CORE INPUTS
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

// Only show advanced settings if Custom is selected
show_advanced = is_custom or is_professional

// A. Trend Settings (Simplified)
group_trend_simple = "üìà Trend Settings"
trend_sensitivity = input.string("Medium", "Trend Sensitivity", 
  options=["Low (Slower, Safer)", "Medium", "High (Faster, More Signals)"], 
  tooltip="How quickly the indicator reacts to trend changes", 
  group=group_trend_simple)

use_higher_timeframe = input.bool(true, "Use Higher Timeframe Confirmation", 
  tooltip="Looks at bigger picture for better signals", 
  group=group_trend_simple)

// B. Advanced Settings (Hidden unless Custom/Professional)
group_advanced = "‚öôÔ∏è Advanced Settings (Experts Only)"
ma_long_len = show_advanced ? input.int(200, "Long MA Length", minval=50, maxval=500, group=group_advanced) : 200
ma_fast_len = show_advanced ? input.int(21, "Fast MA Length", minval=10, maxval=50, group=group_advanced) : 
  (trend_sensitivity == "Low (Slower, Safer)" ? 25 : trend_sensitivity == "High (Faster, More Signals)" ? 15 : 21)
ma_slow_len = show_advanced ? input.int(50, "Slow MA Length", minval=20, maxval=100, group=group_advanced) : 
  (trend_sensitivity == "Low (Slower, Safer)" ? 60 : trend_sensitivity == "High (Faster, More Signals)" ? 40 : 50)

rsi_len = show_advanced ? input.int(14, "RSI Length", minval=5, maxval=50, group=group_advanced) : 14
rsi_ob = show_advanced ? input.int(70, "RSI Overbought", minval=60, maxval=90, group=group_advanced) : 70
rsi_os = show_advanced ? input.int(30, "RSI Oversold", minval=10, maxval=40, group=group_advanced) : 30

// C. Risk Management (Simplified)
group_risk_simple = "üõ°Ô∏è Risk Management (Auto-Calculated)"
risk_per_trade = auto_risk_management ? default_risk_pct : 
  input.float(2.0, "Risk Per Trade (%)", minval=0.1, maxval=5.0, step=0.1, 
  tooltip="Recommended: 0.5-1% for beginners, 1-2% for experienced", group=group_risk_simple)

reward_ratio = auto_risk_management ? default_reward_ratio : 
  input.float(2.5, "Reward:Risk Ratio", minval=1.0, maxval=5.0, step=0.1, 
  tooltip="2.5 means you aim to make $2.5 for every $1 risked", group=group_risk_simple)

account_size = input.float(10000, "Account Size ($)", minval=100, step=100, 
  tooltip="Used to calculate position sizes", group=group_risk_simple)

// D. Visual Settings (Simplified)
group_visual_simple = "üé® Display Settings"
show_signals_only = simplified_view or input.bool(false, "Show Only Buy/Sell Signals", 
  tooltip="Hides technical indicators, shows only entry signals", group=group_visual_simple)

show_risk_levels = input.bool(true, "Show Stop Loss & Take Profit", 
  tooltip="Displays where to place your stops and targets", group=group_visual_simple)

show_trend_ribbon = input.bool(true, "Show Trend Direction", 
  tooltip="Green = uptrend, Red = downtrend", group=group_visual_simple)

signal_strength_filter = auto_risk_management ? default_signal_strength : 
  input.string("Medium", "Signal Quality Filter", 
  options=["Low (More Signals)", "Medium", "High (Fewer, Better Signals)", "Maximum (Very Rare)"], 
  group=group_visual_simple)

// E. Alerts & Notifications
group_alerts = "üîî Alerts & Notifications"
enable_alerts = input.bool(true, "Enable Trade Alerts", group=group_alerts)
enable_mobile_notifications = input.bool(true, "Mobile Push Notifications", group=group_alerts)
alert_sound = input.string("Ding", "Alert Sound", 
  options=["Ding", "Bell", "Chime", "Silent"], group=group_alerts)

// F. Learning & Help
group_learning = "üìö Learning Features"
show_educational_labels = show_learning_mode and input.bool(true, "Show Why Signals Triggered", 
  tooltip="Explains the reason behind each signal", group=group_learning)

show_confidence_meter = input.bool(true, "Show Signal Confidence", 
  tooltip="Red/Yellow/Green confidence indicator", group=group_learning)

show_market_condition = input.bool(true, "Show Market Condition", 
  tooltip="Tells you if market is trending, ranging, or volatile", group=group_learning)

// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
//                              ENHANCED CALCULATIONS
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

// Auto-adjust parameters based on market type
trend_multiplier = market_type == "Trending Markets" ? 0.8 : market_type == "Ranging Markets" ? 1.2 : 1.0
volatility_adj = market_type == "Volatile Markets" ? 1.3 : 1.0

// Higher timeframe logic (simplified)
current_tf = timeframe.period
htf_timeframe = timeframe.in_seconds() <= 300 ? "15" :  // 5min -> 15min
  timeframe.in_seconds() <= 900 ? "1H" :               // 15min -> 1H
  timeframe.in_seconds() <= 3600 ? "4H" :              // 1H -> 4H
  timeframe.in_seconds() <= 14400 ? "1D" : "1W"        // 4H -> 1D, else 1W

// Core calculations with smart defaults
use_htf = use_higher_timeframe and htf_timeframe != current_tf
htf_close = use_htf ? request.security(syminfo.tickerid, htf_timeframe, close, lookahead=barmerge.lookahead_off) : close
htf_ma = use_htf ? request.security(syminfo.tickerid, htf_timeframe, ta.ema(close, 50), lookahead=barmerge.lookahead_off) : ta.ema(close, 50)
htf_bullish = htf_close > htf_ma

// Moving averages
ma_long = ta.ema(close, ma_long_len)
ma_fast = ta.ema(close, ma_fast_len)
ma_slow = ta.ema(close, ma_slow_len)

// Trend determination
trend_up = close > ma_long and ma_fast > ma_slow
trend_down = close < ma_long and ma_fast < ma_slow
trend_sideways = not trend_up and not trend_down

// RSI with divergence
rsi = ta.rsi(close, rsi_len)
rsi_oversold = rsi < rsi_os
rsi_overbought = rsi > rsi_ob
rsi_neutral = rsi >= rsi_os and rsi <= rsi_ob

// Simple divergence detection
rsi_higher_low = rsi > rsi[1] and close < close[1] and rsi < 50
rsi_lower_high = rsi < rsi[1] and close > close[1] and rsi > 50

// Volume analysis (simplified)
vol_avg = ta.sma(volume, 20)
vol_spike = volume > vol_avg * 1.5
vol_declining = volume < vol_avg * 0.8

// MACD
[macd_line, signal_line, macd_hist] = ta.macd(close, 12, 26, 9)
macd_bullish = macd_line > signal_line and macd_hist > macd_hist[1]
macd_bearish = macd_line < signal_line and macd_hist < macd_hist[1]

// Support/Resistance (simplified)
pivot_high = ta.pivothigh(high, 10, 10)
pivot_low = ta.pivotlow(low, 10, 10)

var float last_resistance = na
var float last_support = na
if not na(pivot_high)
    last_resistance := pivot_high
if not na(pivot_low)
    last_support := pivot_low

near_resistance = not na(last_resistance) and close >= last_resistance * 0.995 and close <= last_resistance * 1.005
near_support = not na(last_support) and close >= last_support * 0.995 and close <= last_support * 1.005

// Market condition detection
atr = ta.atr(14)
atr_avg = ta.sma(atr, 50)
high_volatility = atr > atr_avg * 1.5
low_volatility = atr < atr_avg * 0.7

range_pct = (ta.highest(high, 20) - ta.lowest(low, 20)) / close * 100
trending_market = range_pct > 5 and not trend_sideways
ranging_market = range_pct <= 5 or trend_sideways
volatile_market = high_volatility

// Session filter (simplified)
london_session = hour(time, "GMT") >= 8 and hour(time, "GMT") <= 16
ny_session = hour(time, "GMT") >= 13 and hour(time, "GMT") <= 21
asian_session = hour(time, "GMT") >= 21 or hour(time, "GMT") <= 6
major_session = london_session or ny_session

// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
//                              SIMPLIFIED SIGNAL LOGIC
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

// Signal strength calculation (0-10 scale)
bull_strength = 0
bear_strength = 0

// Trend component (0-3 points)
if trend_up
    bull_strength += 2
if use_higher_timeframe and htf_bullish
    bull_strength += 1
if trend_down
    bear_strength += 2
if use_higher_timeframe and not htf_bullish
    bear_strength += 1

// Momentum component (0-3 points)
if macd_bullish and rsi_neutral
    bull_strength += 2
if rsi_higher_low
    bull_strength += 1
if macd_bearish and rsi_neutral
    bear_strength += 2
if rsi_lower_high
    bear_strength += 1

// Volume component (0-2 points)
if vol_spike
    if close > open
        bull_strength += 2
    else
        bear_strength += 2

// Support/Resistance component (0-2 points)
if near_support and not near_resistance
    bull_strength += 2
if near_resistance and not near_support
    bear_strength += 2

// Session bonus (0-1 points)
if major_session
    bull_strength += 1
    bear_strength += 1

// Quality filter thresholds
min_strength = signal_strength_filter == "Low (More Signals)" ? 4 : 
  signal_strength_filter == "Medium" ? 5 : 
  signal_strength_filter == "High (Fewer, Better Signals)" ? 6 : 7

// Signal frequency adjustment
freq_multiplier = signal_frequency == "Conservative (Fewer, Higher Quality)" ? 1.2 : 
  signal_frequency == "Active (More Signals)" ? 0.8 : 1.0
adjusted_min_strength = min_strength * freq_multiplier

// Final signals
is_buy_signal = bull_strength >= adjusted_min_strength and bear_strength < 3 and trending_market != false
is_sell_signal = bear_strength >= adjusted_min_strength and bull_strength < 3 and trending_market != false

// Signal triggers (prevent repainting)
buy_signal = is_buy_signal and not is_buy_signal[1] and barstate.isconfirmed
sell_signal = is_sell_signal and not is_sell_signal[1] and barstate.isconfirmed

// Confidence levels
signal_confidence = math.max(bull_strength, bear_strength) / 10.0
confidence_color = signal_confidence >= 0.7 ? color.green : signal_confidence >= 0.5 ? color.yellow : color.red
confidence_text = signal_confidence >= 0.7 ? "HIGH" : signal_confidence >= 0.5 ? "MEDIUM" : "LOW"

// Risk calculations
atr_value = ta.atr(14)
stop_distance = atr_value * 2.0 * volatility_adj
take_profit_distance = stop_distance * reward_ratio

buy_stop_loss = close - stop_distance
buy_take_profit = close + take_profit_distance
sell_stop_loss = close + stop_distance
sell_take_profit = close - take_profit_distance

// Position sizing
risk_amount = account_size * (risk_per_trade / 100)
position_size_shares = risk_amount / stop_distance
position_value = position_size_shares * close

// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
//                              RETAIL-FRIENDLY VISUALIZATION
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

// Colors (friendly)
color_buy = color.new(#00C851, 0)  // Green
color_sell = color.new(#FF4444, 0) // Red
color_neutral = color.new(#FFC107, 0) // Amber
color_trend_up = color.new(#4CAF50, 30)
color_trend_down = color.new(#F44336, 30)

// Text sizes
txt_size = text_size == "Small" ? size.small : text_size == "Large" ? size.large : size.normal

// Trend ribbon (simplified)
if show_trend_ribbon and not show_signals_only
    p1 = plot(ma_fast, "Fast MA", color=color.new(color_trend_up, 40), linewidth=2)
    p2 = plot(ma_slow, "Slow MA", color=color.new(color_trend_down, 40), linewidth=2)
    fill(p1, p2, color=trend_up ? color.new(color_trend_up, 85) : color.new(color_trend_down, 85))

// Long-term trend line
if not show_signals_only
    plot(ma_long, "Long Term Trend", color=trend_up ? color_trend_up : color_trend_down, linewidth=3)

// Support and Resistance levels
if show_risk_levels and not show_signals_only
    var line res_line = na
    var line sup_line = na
    if not na(last_resistance) and barstate.islast
        line.delete(res_line)
        res_line := line.new(bar_index-50, last_resistance, bar_index+10, last_resistance, 
          extend=extend.right, color=color_sell, width=2, style=line.style_dashed)
        label.new(bar_index, last_resistance, "Resistance", 
          style=label.style_label_down, color=color_sell, textcolor=color.white, size=txt_size)
    
    if not na(last_support) and barstate.islast
        line.delete(sup_line)
        sup_line := line.new(bar_index-50, last_support, bar_index+10, last_support, 
          extend=extend.right, color=color_buy, width=2, style=line.style_dashed)
        label.new(bar_index, last_support, "Support", 
          style=label.style_label_up, color=color_buy, textcolor=color.white, size=txt_size)

// Buy/Sell signals (enhanced for mobile)
signal_size = mobile_mode ? size.large : size.huge
if buy_signal
    label.new(bar_index, low - atr_value, "BUY\n" + confidence_text, 
      style=label.style_label_up, color=color_buy, textcolor=color.white, size=signal_size)
    
    // Educational explanation
    if show_educational_labels
        explanation = "Why BUY:\n"
        if trend_up
            explanation += "‚Ä¢ Uptrend confirmed\n"
        if macd_bullish
            explanation += "‚Ä¢ Momentum positive\n"
        if near_support
            explanation += "‚Ä¢ Near support level\n"
        if vol_spike
            explanation += "‚Ä¢ Volume spike\n"
        
        label.new(bar_index, high + atr_value*2, explanation, 
          style=label.style_label_down, color=color.new(color.blue, 20), 
          textcolor=color.white, size=size.small)

if sell_signal
    label.new(bar_index, high + atr_value, "SELL\n" + confidence_text, 
      style=label.style_label_down, color=color_sell, textcolor=color.white, size=signal_size)
    
    // Educational explanation
    if show_educational_labels
        explanation = "Why SELL:\n"
        if trend_down
            explanation += "‚Ä¢ Downtrend confirmed\n"
        if macd_bearish
            explanation += "‚Ä¢ Momentum negative\n"
        if near_resistance
            explanation += "‚Ä¢ Near resistance level\n"
        if vol_spike
            explanation += "‚Ä¢ Volume spike\n"
        
        label.new(bar_index, low - atr_value*2, explanation, 
          style=label.style_label_up, color=color.new(color.purple, 20), 
          textcolor=color.white, size=size.small)

// Stop Loss and Take Profit lines
if show_risk_levels
    if buy_signal
        // Stop Loss
        line.new(bar_index, buy_stop_loss, bar_index+50, buy_stop_loss, 
          extend=extend.right, color=color_sell, width=2, style=line.style_dotted)
        label.new(bar_index+2, buy_stop_loss, "STOP\n$" + str.tostring(buy_stop_loss, "#.##"), 
          style=label.style_label_left, color=color_sell, textcolor=color.white, size=txt_size)
        
        // Take Profit
        line.new(bar_index, buy_take_profit, bar_index+50, buy_take_profit, 
          extend=extend.right, color=color_buy, width=2, style=line.style_dotted)
        label.new(bar_index+2, buy_take_profit, "TARGET\n$" + str.tostring(buy_take_profit, "#.##"), 
          style=label.style_label_left, color=color_buy, textcolor=color.white, size=txt_size)
    
    if sell_signal
        // Stop Loss
        line.new(bar_index, sell_stop_loss, bar_index+50, sell_stop_loss, 
          extend=extend.right, color=color_sell, width=2, style=line.style_dotted)
        label.new(bar_index+2, sell_stop_loss, "STOP\n$" + str.tostring(sell_stop_loss, "#.##"), 
          style=label.style_label_left, color=color_sell, textcolor=color.white, size=txt_size)
        
        // Take Profit
        line.new(bar_index, sell_take_profit, bar_index+50, sell_take_profit, 
          extend=extend.right, color=color_buy, width=2, style=line.style_dotted)
        label.new(bar_index+2, sell_take_profit, "TARGET\n$" + str.tostring(sell_take_profit, "#.##"), 
          style=label.style_label_left, color=color_buy, textcolor=color.white, size=txt_size)

// Confidence meter background
if show_confidence_meter
    bgcolor_confidence = is_buy_signal or is_sell_signal ? 
      (signal_confidence >= 0.7 ? color.new(color_buy, 95) : 
       signal_confidence >= 0.5 ? color.new(color_neutral, 95) : 
       color.new(color_sell, 95)) : na
    bgcolor(bgcolor_confidence, title="Signal Confidence")

// Market condition indicator
market_condition_text = trending_market ? "TRENDING" : ranging_market ? "RANGING" : "VOLATILE"
market_condition_color = trending_market ? color_trend_up : ranging_market ? color_neutral : color_sell

// Mobile-optimized info table
var table info_table = na
if barstate.islast and not mobile_mode
    table.delete(info_table)
    info_table := table.new(position.top_right, 3, 8, 
      border_width=1, bgcolor=color.new(color.white, 80), 
      border_color=color.new(color.gray, 50))
    
    // Headers
    table.cell(info_table, 0, 0, "ECE Pro V3", bgcolor=color.new(color.blue, 20), 
      text_color=color.white, text_size=txt_size)
    table.cell(info_table, 1, 0, "Status", bgcolor=color.new(color.blue, 20), 
      text_color=color.white, text_size=txt_size)
    table.cell(info_table, 2, 0, "Value", bgcolor=color.new(color.blue, 20), 
      text_color=color.white, text_size=txt_size)
    
    // Market condition
    table.cell(info_table, 0, 1, "Market", text_size=txt_size)
    table.cell(info_table, 1, 1, market_condition_text, 
      bgcolor=color.new(market_condition_color, 80), text_size=txt_size)
    table.cell(info_table, 2, 1, "üìä", text_size=txt_size)
    
    // Trend direction
    table.cell(info_table, 0, 2, "Trend", text_size=txt_size)
    trend_text = trend_up ? "UP ‚¨ÜÔ∏è" : trend_down ? "DOWN ‚¨áÔ∏è" : "SIDEWAYS ‚û°Ô∏è"
    trend_bg = trend_up ? color.new(color_buy, 80) : trend_down ? color.new(color_sell, 80) : color.new(color_neutral, 80)
    table.cell(info_table, 1, 2, trend_text, bgcolor=trend_bg, text_size=txt_size)
    table.cell(info_table, 2, 2, "üìà", text_size=txt_size)
    
    // Signal strength
    table.cell(info_table, 0, 3, "Signal", text_size=txt_size)
    current_strength = math.max(bull_strength, bear_strength)
    strength_text = str.tostring(current_strength) + "/10"
    strength_bg = current_strength >= 7 ? color.new(color_buy, 80) : 
      current_strength >= 5 ? color.new(color_neutral, 80) : color.new(color_sell, 80)
    table.cell(info_table, 1, 3, strength_text, bgcolor=strength_bg, text_size=txt_size)
    table.cell(info_table, 2, 3, "‚ö°", text_size=txt_size)
    
    // Risk per trade
    table.cell(info_table, 0, 4, "Risk/Trade", text_size=txt_size)
    table.cell(info_table, 1, 4, str.tostring(risk_per_trade, "#.#") + "%", text_size=txt_size)
    table.cell(info_table, 2, 4, "üõ°Ô∏è", text_size=txt_size)
    
    // Reward ratio
    table.cell(info_table, 0, 5, "R:R Ratio", text_size=txt_size)
    table.cell(info_table, 1, 5, str.tostring(reward_ratio, "#.#") + ":1", text_size=txt_size)
    table.cell(info_table, 2, 5, "üí∞", text_size=txt_size)
    
    // Position size
    table.cell(info_table, 0, 6, "Position", text_size=txt_size)
    pos_text = position_value > 1000 ? "$" + str.tostring(position_value/1000, "#.#") + "K" : "$" + str.tostring(position_value, "#")
    table.cell(info_table, 1, 6, pos_text, text_size=txt_size)
    table.cell(info_table, 2, 6, "üìä", text_size=txt_size)
    
    // Session
    table.cell(info_table, 0, 7, "Session", text_size=txt_size)
    session_text = london_session ? "London" : ny_session ? "NY" : asian_session ? "Asian" : "Other"
    session_bg = major_session ? color.new(color_buy, 80) : color.new(color_neutral, 80)
    table.cell(info_table, 1, 7, session_text, bgcolor=session_bg, text_size=txt_size)
    table.cell(info_table, 2, 7, "üåç", text_size=txt_size)

// Mobile mode - simplified display
if mobile_mode and barstate.islast
    var table mobile_table = na
    table.delete(mobile_table)
    mobile_table := table.new(position.top_right, 2, 4, 
      border_width=2, bgcolor=color.new(color.black, 10))
    
    table.cell(mobile_table, 0, 0, "ECE V3", bgcolor=color.new(color.blue, 20), 
      text_color=color.white, text_size=size.large)
    table.cell(mobile_table, 1, 0, "üì±", bgcolor=color.new(color.blue, 20), 
      text_color=color.white, text_size=size.large)
    
    table.cell(mobile_table, 0, 1, "Trend", text_size=size.normal)
    mobile_trend = trend_up ? "üü¢ UP" : trend_down ? "üî¥ DOWN" : "üü° SIDE"
    table.cell(mobile_table, 1, 1, mobile_trend, text_size=size.normal)
    
    table.cell(mobile_table, 0, 2, "Signal", text_size=size.normal)
    mobile_signal = current_strength >= 7 ? "üü¢ STRONG" : current_strength >= 5 ? "üü° WEAK" : "üî¥ NONE"
    table.cell(mobile_table, 1, 2, mobile_signal, text_size=size.normal)
    
    // Continuing from Part 1...
    
    table.cell(mobile_table, 0, 3, "Risk", text_size=size.normal)
    table.cell(mobile_table, 1, 3, str.tostring(risk_per_trade, "#.#") + "%", text_size=size.normal)

// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
//                              ADVANCED FEATURES (Professional Mode)
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

// Multi-timeframe confirmation (Professional only)
if is_professional
    // 4H trend confirmation
    htf_4h_trend = request.security(syminfo.tickerid, "240", trend_up, lookahead=barmerge.lookahead_off)
    // Daily trend confirmation  
    htf_daily_trend = request.security(syminfo.tickerid, "1D", trend_up, lookahead=barmerge.lookahead_off)
    
    // Add MTF confirmation to signal strength
    if htf_4h_trend and htf_daily_trend
        bull_strength += 1
    if not htf_4h_trend and not htf_daily_trend
        bear_strength += 1

// Volume profile analysis (Professional only)
if is_professional and not simplified_view
    vol_profile_high = ta.highest(volume, 50)
    vol_profile_avg = ta.sma(volume, 50)
    
    unusual_volume = volume > vol_profile_avg * 2
    if unusual_volume
        label.new(bar_index, low - atr_value * 3, "üîä VOL", 
          style=label.style_circle, color=color.orange, size=size.small)

// Fibonacci levels (Professional only)
if is_professional and show_risk_levels
    recent_high = ta.highest(high, 50)
    recent_low = ta.lowest(low, 50)
    fib_range = recent_high - recent_low
    
    fib_618 = recent_high - (fib_range * 0.618)
    fib_382 = recent_high - (fib_range * 0.382)
    fib_50 = recent_high - (fib_range * 0.5)
    
    var line fib_618_line = na
    var line fib_382_line = na
    var line fib_50_line = na
    
    if barstate.islast
        line.delete(fib_618_line)
        line.delete(fib_382_line) 
        line.delete(fib_50_line)
        
        fib_618_line := line.new(bar_index-20, fib_618, bar_index+5, fib_618, 
          color=color.new(color.gold, 50), width=1, style=line.style_dashed)
        fib_382_line := line.new(bar_index-20, fib_382, bar_index+5, fib_382, 
          color=color.new(color.gold, 50), width=1, style=line.style_dashed)
        fib_50_line := line.new(bar_index-20, fib_50, bar_index+5, fib_50, 
          color=color.new(color.gold, 30), width=2, style=line.style_dashed)

// Smart money concepts (Professional only)
if is_professional
    // Order blocks detection
    bullish_ob = close[3] < open[3] and close[2] < open[2] and close[1] > open[1] and close > open
    bearish_ob = close[3] > open[3] and close[2] > open[2] and close[1] < open[1] and close < open
    
    if bullish_ob
        box.new(bar_index-3, low[3], bar_index, high[1], 
          bgcolor=color.new(color.green, 90), border_color=color.green, border_width=1)
        label.new(bar_index-1, low[3], "BUY OB", style=label.style_label_up, 
          color=color.green, textcolor=color.white, size=size.small)
    
    if bearish_ob
        box.new(bar_index-3, low[1], bar_index, high[3], 
          bgcolor=color.new(color.red, 90), border_color=color.red, border_width=1)
        label.new(bar_index-1, high[3], "SELL OB", style=label.style_label_down, 
          color=color.red, textcolor=color.white, size=size.small)

// Pattern recognition
double_bottom = low[2] < low[4] and low[2] < low and low[1] > low[2] and close > close[1]
double_top = high[2] > high[4] and high[2] > high and high[1] < high[2] and close < close[1]

if double_bottom and not simplified_view
    label.new(bar_index, low - atr_value, "W", style=label.style_circle, 
      color=color.green, textcolor=color.white, size=size.normal, 
      tooltip="Double Bottom Pattern")

if double_top and not simplified_view
    label.new(bar_index, high + atr_value, "M", style=label.style_circle, 
      color=color.red, textcolor=color.white, size=size.normal, 
      tooltip="Double Top Pattern")

// Risk management enhancements
max_risk_per_day = account_size * 0.05  // 5% max daily risk
var float daily_risk = 0.0
var int last_day = dayofweek

if dayofweek != last_day
    daily_risk := 0.0
    last_day := dayofweek

position_risk = position_size_shares * stop_distance
new_daily_risk = daily_risk + position_risk
risk_exceeded = new_daily_risk > max_risk_per_day

// Update daily risk on signals
if buy_signal or sell_signal
    daily_risk := new_daily_risk

// Risk warning
if risk_exceeded and (buy_signal or sell_signal)
    label.new(bar_index, high + atr_value * 2, "‚ö†Ô∏è DAILY RISK LIMIT", 
      style=label.style_label_down, color=color.new(color.red, 20), 
      textcolor=color.white, size=size.large)

// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
//                              PERFORMANCE TRACKING
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

// Track signal performance
var int total_signals = 0
var int winning_signals = 0
var float total_pnl = 0.0
var array<float> signal_prices = array.new<float>()
var array<bool> signal_directions = array.new<bool>()  // true = buy, false = sell

// Record signals
if buy_signal or sell_signal
    total_signals += 1
    array.push(signal_prices, close)
    array.push(signal_directions, buy_signal)
    
    // Keep only last 100 signals for memory management
    if array.size(signal_prices) > 100
        array.shift(signal_prices)
        array.shift(signal_directions)

// Check previous signals for exits (simplified)
if array.size(signal_prices) > 0 and barstate.isconfirmed
    for i = 0 to math.min(array.size(signal_prices) - 1, 9)  // Check last 10 signals
        signal_price = array.get(signal_prices, i)
        was_buy = array.get(signal_directions, i)
        
        if was_buy
            // Check if take profit or stop loss hit
            tp_hit = high >= signal_price * (1 + (reward_ratio * 2 * atr_value / signal_price))
            sl_hit = low <= signal_price * (1 - (2 * atr_value / signal_price))
            
            if tp_hit or sl_hit
                winning_signals += tp_hit ? 1 : 0
                pnl = tp_hit ? reward_ratio * risk_per_trade : -risk_per_trade
                total_pnl += pnl
                array.remove(signal_prices, i)
                array.remove(signal_directions, i)
                break
        else
            // Check sell signal exits
            tp_hit = low <= signal_price * (1 - (reward_ratio * 2 * atr_value / signal_price))
            sl_hit = high >= signal_price * (1 + (2 * atr_value / signal_price))
            
            if tp_hit or sl_hit
                winning_signals += tp_hit ? 1 : 0
                pnl = tp_hit ? reward_ratio * risk_per_trade : -risk_per_trade
                total_pnl += pnl
                array.remove(signal_prices, i)
                array.remove(signal_directions, i)
                break

// Calculate performance metrics
win_rate = total_signals > 0 ? winning_signals / total_signals * 100 : 0
avg_pnl = total_signals > 0 ? total_pnl / total_signals : 0

// Performance display (if enabled)
show_performance = input.bool(false, "Show Performance Stats", 
  tooltip="Display win rate and P&L statistics", group=group_learning)

if show_performance and barstate.islast and not mobile_mode
    var table perf_table = na
    table.delete(perf_table)
    perf_table := table.new(position.bottom_right, 2, 5, 
      border_width=1, bgcolor=color.new(color.black, 10))
    
    table.cell(perf_table, 0, 0, "üìà PERFORMANCE", bgcolor=color.new(color.blue, 20), 
      text_color=color.white, text_size=txt_size)
    table.cell(perf_table, 1, 0, "STATS", bgcolor=color.new(color.blue, 20), 
      text_color=color.white, text_size=txt_size)
    
    table.cell(perf_table, 0, 1, "Signals", text_size=txt_size)
    table.cell(perf_table, 1, 1, str.tostring(total_signals), text_size=txt_size)
    
    table.cell(perf_table, 0, 2, "Win Rate", text_size=txt_size)
    wr_color = win_rate >= 60 ? color.new(color.green, 80) : 
      win_rate >= 40 ? color.new(color.yellow, 80) : color.new(color.red, 80)
    table.cell(perf_table, 1, 2, str.tostring(win_rate, "#.#") + "%", 
      bgcolor=wr_color, text_size=txt_size)
    
    table.cell(perf_table, 0, 3, "Avg P&L", text_size=txt_size)
    pnl_color = avg_pnl > 0 ? color.new(color.green, 80) : color.new(color.red, 80)
    table.cell(perf_table, 1, 3, str.tostring(avg_pnl, "#.##") + "%", 
      bgcolor=pnl_color, text_size=txt_size)
    
    table.cell(perf_table, 0, 4, "Total P&L", text_size=txt_size)
    total_color = total_pnl > 0 ? color.new(color.green, 80) : color.new(color.red, 80)
    table.cell(perf_table, 1, 4, str.tostring(total_pnl, "#.##") + "%", 
      bgcolor=total_color, text_size=txt_size)

// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
//                              ALERTS & NOTIFICATIONS
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

// Alert conditions
alertcondition(buy_signal, "ECE Pro V3 - BUY Signal", 
  "üü¢ BUY SIGNAL DETECTED!\n" +
  "Symbol: {{ticker}}\n" + 
  "Price: {{close}}\n" +
  "Stop Loss: " + str.tostring(buy_stop_loss, "#.##") + "\n" +
  "Take Profit: " + str.tostring(buy_take_profit, "#.##") + "\n" +
  "Position Size: $" + str.tostring(position_value, "#") + "\n" +
  "Confidence: " + confidence_text + "\n" +
  "Market: " + market_condition_text)

alertcondition(sell_signal, "ECE Pro V3 - SELL Signal", 
  "üî¥ SELL SIGNAL DETECTED!\n" +
  "Symbol: {{ticker}}\n" + 
  "Price: {{close}}\n" +
  "Stop Loss: " + str.tostring(sell_stop_loss, "#.##") + "\n" +
  "Take Profit: " + str.tostring(sell_take_profit, "#.##") + "\n" +
  "Position Size: $" + str.tostring(position_value, "#") + "\n" +
  "Confidence: " + confidence_text + "\n" +
  "Market: " + market_condition_text)

// Risk alerts
alertcondition(risk_exceeded, "ECE Pro V3 - Risk Alert", 
  "‚ö†Ô∏è DAILY RISK LIMIT REACHED!\n" +
  "Daily Risk: " + str.tostring(daily_risk/account_size*100, "#.##") + "%\n" +
  "Limit: 5%\n" +
  "Consider stopping trading for today.")

// Market condition change alerts
market_change = (trending_market and not trending_market[1]) or 
  (ranging_market and not ranging_market[1]) or 
  (volatile_market and not volatile_market[1])

alertcondition(market_change, "ECE Pro V3 - Market Change", 
  "üìä MARKET CONDITION CHANGED!\n" +
  "New Condition: " + market_condition_text + "\n" +
  "Adjust your strategy accordingly.")

// Session alerts
session_change = (major_session and not major_session[1]) or 
  (not major_session and major_session[1])

alertcondition(session_change and enable_alerts, "ECE Pro V3 - Session Alert", 
  "üåç TRADING SESSION CHANGE!\n" +
  "Session: " + (london_session ? "London" : ny_session ? "New York" : asian_session ? "Asian" : "Other") + "\n" +
  "Volume expected to " + (major_session ? "increase" : "decrease"))

// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
//                              BEGINNER EDUCATION & TIPS
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

// Educational tooltips and tips
if show_learning_mode and experience_level == "Beginner" and barstate.islast
    var table edu_table = na
    table.delete(edu_table)
    edu_table := table.new(position.bottom_left, 1, 6, 
      border_width=1, bgcolor=color.new(color.purple, 10))
    
    table.cell(edu_table, 0, 0, "üìö LEARNING TIPS", bgcolor=color.new(color.purple, 20), 
      text_color=color.white, text_size=txt_size)
    
    table.cell(edu_table, 0, 1, "‚úÖ Wait for GREEN confidence", 
      text_color=color.white, text_size=size.small)
    table.cell(edu_table, 0, 2, "üõ°Ô∏è Always use stop losses", 
      text_color=color.white, text_size=size.small)
    table.cell(edu_table, 0, 3, "üí∞ Risk max 1-2% per trade", 
      text_color=color.white, text_size=size.small)
    table.cell(edu_table, 0, 4, "üìà Trade with the trend", 
      text_color=color.white, text_size=size.small)
    table.cell(edu_table, 0, 5, "‚è∞ Best signals in major sessions", 
      text_color=color.white, text_size=size.small)

// Warning for high-risk signals
high_risk_signal = (buy_signal or sell_signal) and signal_confidence < 0.6
if high_risk_signal and show_learning_mode
    label.new(bar_index, high + atr_value * 3, "‚ö†Ô∏è LOWER CONFIDENCE\nConsider smaller position", 
      style=label.style_label_down, color=color.new(color.orange, 20), 
      textcolor=color.white, size=size.normal)

// Trend change warnings
trend_change_warning = (trend_up and trend_down[1]) or (trend_down and trend_up[1])
if trend_change_warning and show_learning_mode
    label.new(bar_index, close, "üîÑ TREND CHANGE\nWait for confirmation", 
      style=label.style_circle, color=color.new(color.blue, 20), 
      textcolor=color.white, size=size.small)

// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
//                              FINAL OPTIMIZATIONS & CLEANUP
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

// Memory management - clean old data
var int bars_processed = 0
bars_processed += 1

// Clean old performance data every 500 bars
if bars_processed % 500 == 0
    if array.size(signal_prices) > 50
        array.clear(signal_prices)
        array.clear(signal_directions)
        total_signals := 0
        winning_signals := 0
        total_pnl := 0.0

// Final signal confirmation with all filters
final_buy_signal = buy_signal and not risk_exceeded and 
  (signal_confidence >= 0.5 or signal_strength_filter == "Low (More Signals)")

final_sell_signal = sell_signal and not risk_exceeded and 
  (signal_confidence >= 0.5 or signal_strength_filter == "Low (More Signals)")

// Plot invisible series for strategy testing
plot(final_buy_signal ? 1 : final_sell_signal ? -1 : 0, "Signal Direction", 
  display=display.none, title="Strategy Entry Signal")

plot(stop_distance, "ATR Stop Distance", display=display.none, title="Stop Distance")

plot(signal_confidence, "Signal Confidence", display=display.none, title="Confidence Score")

// Version info and credits
if barstate.islast and not mobile_mode
    var label version_label = na
    label.delete(version_label)
    version_label := label.new(bar_index, low - atr_value * 5, 
      "Elite Confluence Engine Pro V3.0\n¬© 2024 Elite Trading Systems\nRetail Optimized Edition", 
      style=label.style_label_up, color=color.new(color.gray, 50), 
      textcolor=color.white, size=size.tiny)

// End of script
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
//                              SCRIPT COMPLETE
// ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
